CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8 , 2 ),
    customer_id INT,
    FOREIGN KEY (customer_id)
        REFERENCES customers (id)
        ON DELETE CASCADE
);

INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');
       
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/02/10', 99.99, 1),
       ('2017/11/11', 35.50, 1),
       ('2014/12/12', 800.67, 2),
       ('2015/01/03', 12.50, 2),
       ('1999/04/11', 450.25, 5);
       
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/06/06', 33.67, 98);

select * from customers where last_name = 'George';
select * from orders where customer_id = '1';

SELECT 
    *
FROM
    orders
WHERE
    customer_id = (SELECT 
            id
        FROM
            customers
        WHERE
            last_name = 'George');
select * from customers,orders;

-- inner join

SELECT 
    *
FROM
    customers,
    orders
WHERE
    customers.id = orders.customer_id;
    
SELECT 
    *
FROM
    customers c,
    orders o
WHERE
    c.id = o.customer_id;
    
SELECT 
    first_name, last_name, SUM(amount)
FROM
    customers
        JOIN
    orders ON customers.id = orders.customer_id
GROUP BY customers.id;
SELECT 
    first_name,
    last_name,
    IFNULL(order_date, 0),
    IFNULL(SUM(amount), 0) AS total
FROM
    customers
        LEFT JOIN
    orders ON customers.id = orders.customer_id
GROUP BY customers.id;
select * from customers right join orders on customers.id = orders.customer_id;

drop table orders,customers;
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date date,
    amount decimal(8,2),
    customer_id int
    #foreign key(customer_id) references customers(id)
);

INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');
       
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/02/10', 99.99, 1),
       ('2017/11/11', 35.50, 1),
       ('2014/12/12', 800.67, 2),
       ('2015/01/03', 12.50, 2),
       ('1999/04/11', 450.25, 5),
       ('2001/04/11', 778.20, 45),
       (curdate(), 980.25, 78);
       
       SELECT 
    first_name, last_name, SUM(amount)
FROM
    customers
        right JOIN
    orders ON customers.id = orders.customer_id
GROUP BY customers.id;    
delete from customers where first_name = 'Boy';
select * from customers;
select * from orders;

select * from customers left join orders ON customers.id = orders.customer_id;
select * from orders right join customers ON orders.customer_id = customers.id;

-- exercise
create table students ( id int auto_increment primary key, first_name varchar(100));
create table papers ( title varchar(100), grade decimal(5,2),student_id int, foreign key (STUDENT_id) references students(id));
INSERT INTO students (first_name) VALUES 
('Caleb'), 
('Samantha'), 
('Raj'), 
('Carlos'), 
('Lisa');
 
INSERT INTO papers (student_id, title, grade ) VALUES
(1, 'My First Book Report', 60),
(1, 'My Second Book Report', 75),
(2, 'Russian Lit Through The Ages', 94),
(2, 'De Montaigne and The Art of The Essay', 98),
(4, 'Borges and Magical Realism', 89);

drop tables students,papers;

SELECT first_name, ifnull(title,'Missing') as title, ifnull(grade,0) as grade
FROM students
left JOIN papers
    ON students.id = papers.student_id
ORDER BY grade DESC;

SELECT 
    first_name, ifnull(AVG(grade),0) AS grade
FROM
    students
        LEFT JOIN
    papers ON students.id = papers.student_id
GROUP BY first_name
ORDER BY grade DESC;

SELECT 
    first_name,
    IFNULL(AVG(grade), 0) AS grade,
    CASE
        WHEN AVG(grade) >= 75 THEN 'passing'
        else 'failing'
    END AS 'passing status'
FROM
    students
        LEFT JOIN
    papers ON students.id = papers.student_id
GROUP BY first_name
ORDER BY grade DESC;

---- Challenge

create table reviewers (id int auto_increment primary key ,first_name varchar(100),last_name varchar(100));
create table series (id int auto_increment primary key ,title varchar(100),released_year year(4), genre varchar(100));
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rating DECIMAL(2 , 1 ),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY (series_id)
        REFERENCES series (id),
    FOREIGN KEY (reviewer_id)
        REFERENCES reviewers (id)
);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');
 
 
INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
    
 
INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);
    
    select * from series;
    select * from reviews;
    
   -- challenge 2
    SELECT 
    title, rating
FROM
    series
        JOIN
    reviews ON series.id = reviews.series_id;

SELECT 
    series.id, title, AVG(rating) AS avg_rating
FROM
    series
        JOIN
    reviews ON series.id = reviews.series_id
GROUP BY series.id
ORDER BY avg_rating ASC;   

 -- challenge3  
 
SELECT 
    first_name, last_name, rating
FROM
    reviewers
        JOIN
    reviews ON reviewers.id = reviews.reviewer_id;
#GROUP BY reviewers.id;    

SELECT 
    first_name, last_name, avg(rating) as avg_rating
FROM
    reviewers
        JOIN
    reviews ON reviewers.id = reviews.reviewer_id
GROUP BY reviewers.id;   

-- challenge 4 -- unreviewed series

select * from series left join reviews on series.id = reviews.series_id where rating is null;

-- challenge 6 --

select genre, round(avg(rating),2) as avg_rating from series join reviews on series.id = reviews.series_id group by genre;
SELECT 
    first_name,
    last_name,
    COUNT(reviewer_id) AS count,
    MIN(rating) AS min,
    MAX(rating) AS max,
    AVG(rating) AS avg,
    CASE
        WHEN COUNT(reviewer_id) > 0 THEN 'ACTIVE'
        ELSE 'INACTIVE'
    END AS 'STATUS'
FROM
    reviewers
        left JOIN
    reviews ON reviewers.id = reviews.reviewer_id
GROUP BY reviewers.id;

SELECT 
    first_name,
    last_name,
    COUNT(reviewer_id) AS count,
    ifnull(MIN(rating),0) AS min,
    ifnull(MAX(rating),0) AS max,
    ifnull(AVG(rating),0) AS avg,
    if(count(rating) > 0 ,'ACTIVE','INACTIVE') as STATUS     
FROM
    reviewers
        left JOIN
    reviews ON reviewers.id = reviews.reviewer_id
GROUP BY reviewers.id;

-- challenge 7 3 tables

SELECT 
    title,
    rating,
    CONCAT(first_name, ' ', last_name) AS 'Full Name'
FROM
    reviewers r1
        INNER JOIN
    reviews r2 ON r1.id = r2.reviewer_id
        INNER JOIN
    series s ON s.id = r2.series_id
ORDER BY title;
